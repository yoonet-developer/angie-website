---
import Button from './Button.astro'
import svgPinkStar from '../assets/pink-star.svg'
import IntakeCards from './IntakeCards.astro'

const applicantTypes = [
  { id: 'graduate', name: 'I\'m a Fresh Graduate', icon: '🎓' },
  { id: 'business', name: 'I\'m a Business Owner', icon: '💼' }
]

const graduateFields = [
  { id: 'marketing', name: 'Marketing', icon: '📢' },
  { id: 'communications', name: 'Communications', icon: '📱' },
  { id: 'business', name: 'Business', icon: '💼' },
  { id: 'arts', name: 'Arts/Creative', icon: '🎨' },
  { id: 'it', name: 'IT/Technology', icon: '💻' },
  { id: 'other', name: 'Other', icon: '📚' }
]

const graduateExperience = [
  { id: 'none', name: 'No social media experience', icon: '🌱' },
  { id: 'personal', name: 'Personal social media only', icon: '📱' },
  { id: 'internship', name: 'Internship/part-time experience', icon: '💡' },
  { id: 'freelance', name: 'Some freelance work', icon: '🏃‍♂️' }
]

const businessTypes = [
  { id: 'restaurant', name: 'Restaurant/Food', icon: '🍽️' },
  { id: 'retail', name: 'Retail/E-commerce', icon: '🛒' },
  { id: 'professional', name: 'Professional Services', icon: '💼' },
  { id: 'healthcare', name: 'Healthcare', icon: '🏥' },
  { id: 'tech', name: 'Technology', icon: '💻' },
  { id: 'other', name: 'Other', icon: '🏢' }
]

const businessGoals = [
  { id: 'awareness', name: 'Increase brand awareness', icon: '📣' },
  { id: 'engagement', name: 'Improve customer engagement', icon: '💬' },
  { id: 'sales', name: 'Drive more sales', icon: '💰' },
  { id: 'presence', name: 'Build online presence', icon: '🌐' },
  { id: 'community', name: 'Build community', icon: '👥' }
]

const currentSocialMedia = [
  { id: 'none', name: 'No current social media', icon: '❌' },
  { id: 'myself', name: 'I handle it myself', icon: '🙋‍♂️' },
  { id: 'employee', name: 'An employee handles it', icon: '👩‍💻' },
  { id: 'agency', name: 'We use an agency', icon: '🏢' }
]

const platforms = [
  { id: 'facebook', name: 'Facebook', icon: '📘' },
  { id: 'instagram', name: 'Instagram', icon: '📷' },
  { id: 'linkedin', name: 'LinkedIn', icon: '💼' },
  { id: 'tiktok', name: 'TikTok', icon: '🎵' },
  { id: 'twitter', name: 'Twitter/X', icon: '🐦' },
  { id: 'youtube', name: 'YouTube', icon: '📺' }
]

const softwareOptions = [
  { 
    id: 'canva', 
    name: 'Canva', 
    icon: '🎨',
    skills: ['Templates', 'Brand Kits', 'Social Graphics', 'Presentations']
  },
  { 
    id: 'photoshop', 
    name: 'Photoshop', 
    icon: '🖼️',
    skills: ['Photo Retouching', 'Digital Art', 'Compositing', 'Color Correction']
  },
  { 
    id: 'figma', 
    name: 'Figma', 
    icon: '✨',
    skills: ['UX Design', 'Prototyping', 'Animations', 'Component Systems']
  },
  { 
    id: 'premiere', 
    name: 'Premiere Pro', 
    icon: '🎬',
    skills: ['Video Editing', 'Color Grading', 'Audio Sync', 'Transitions']
  },
  { 
    id: 'aftereffects', 
    name: 'After Effects', 
    icon: '💫',
    skills: ['Motion Graphics', 'Visual Effects', '2D Animation', 'Compositing']
  },
  { 
    id: 'hootsuite', 
    name: 'Hootsuite', 
    icon: '🐦',
    skills: ['Scheduling', 'Analytics', 'Team Management', 'Content Curation']
  },
  { 
    id: 'buffer', 
    name: 'Buffer', 
    icon: '📅',
    skills: ['Content Scheduling', 'Analytics', 'Team Collaboration', 'Auto-posting']
  },
  { 
    id: 'mailchimp', 
    name: 'Mailchimp', 
    icon: '📧',
    skills: ['Automations', 'Segmentation', 'A/B Testing', 'Campaign Analytics']
  }
]
---

<style>
  .form-container {
    max-width: 800px;
    margin: 0 auto;
    background: white;
    border: 3px solid black;
    box-shadow: 8px 8px 0px rgba(0,0,0,0.3);
    border-radius: 12px;
    overflow: hidden;
  }
  
  .progress-indicator {
    padding: 30px 20px 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }
  
  .progress-bar-container {
    width: 100%;
    height: 8px;
    background: rgba(255,255,255,0.3);
    border-radius: 4px;
    overflow: hidden;
    margin: 0 auto;
    max-width: 500px;
  }
  
  .progress-bar {
    height: 100%;
    background: rgba(255,255,255,0.9);
    border-radius: 4px;
    transition: width 0.3s ease;
    width: 12.5%;
  }
  
  .progress-text {
    text-align: center;
    margin-top: 10px;
    font-size: 14px;
    color: white;
    font-weight: 500;
  }
  
  .form-content {
    padding: 40px;
  }
  
  .option-grid {
    display: grid;
    gap: 15px;
    margin-top: 30px;
  }
  
  .option {
    padding: 20px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s;
    background: white;
    display: flex;
    align-items: center;
    gap: 12px;
  }
  
  .option:hover {
    border-color: #667eea;
    box-shadow: 0 4px 8px rgba(102, 126, 234, 0.1);
  }
  
  .option.selected {
    border-color: #667eea;
    background: #f0f4ff;
    box-shadow: 0 4px 8px rgba(102, 126, 234, 0.2);
  }
  
  .option-icon {
    font-size: 2rem;
    min-width: 50px;
  }
  
  .option-content {
    flex: 1;
  }
  
  .option-name {
    font-weight: bold;
    font-size: 1.1rem;
    color: #374151;
  }
  
  .option-desc {
    font-size: 0.9rem;
    color: #6b7280;
    margin-top: 4px;
  }
  
  .form-buttons {
    display: flex;
    justify-content: space-between;
    margin-top: 40px;
    gap: 20px;
  }
  
  .btn-form {
    padding: 12px 30px;
    border-radius: 8px;
    font-weight: bold;
    cursor: pointer;
    border: 2px solid;
    transition: all 0.2s;
    text-decoration: none;
  }
  
  .btn-primary {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }
  
  .btn-primary:hover:not(:disabled) {
    background: #5a67d8;
    border-color: #5a67d8;
  }
  
  .btn-primary:disabled {
    background: #9ca3af;
    border-color: #9ca3af;
    cursor: not-allowed;
  }
  
  .btn-secondary {
    background: white;
    color: #374151;
    border-color: #d1d5db;
  }
  
  .btn-secondary:hover {
    background: #f9fafb;
  }
  
  .hidden {
    display: none;
  }
  
  .success-content {
    text-align: center;
    padding: 40px 20px;
  }
  
  .success-icon {
    font-size: 4rem;
    margin-bottom: 20px;
  }
  
  .contact-link {
    display: inline-block;
    margin-top: 20px;
    padding: 15px 30px;
    background: #667eea;
    color: white;
    text-decoration: none;
    border-radius: 8px;
    font-weight: bold;
    transition: background 0.2s;
  }
  
  .contact-link:hover {
    background: #5a67d8;
  }
  
  .input-field {
    width: 100%;
    padding: 12px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    margin-top: 10px;
  }
  
  .input-field:focus {
    outline: none;
    border-color: #667eea;
  }
  
  .textarea-field {
    width: 100%;
    padding: 12px;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    font-size: 1rem;
    margin-top: 10px;
    min-height: 100px;
    resize: vertical;
  }
  
  .textarea-field:focus {
    outline: none;
    border-color: #667eea;
  }
  
  .form-section {
    margin-bottom: 30px;
  }
  
  .form-section h4 {
    font-size: 1.2rem;
    margin-bottom: 15px;
    color: #374151;
  }
  
  .back-button {
    position: absolute;
    bottom: 20px;
    left: 20px;
  }
  
  .rating-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
  }
  
  .rating-popup.hidden {
    display: none;
  }
  
  .rating-modal {
    background: white;
    padding: 30px;
    border-radius: 12px;
    border: 3px solid black;
    box-shadow: 8px 8px 0px rgba(0,0,0,0.3);
    max-width: 400px;
    width: 90%;
    text-align: center;
  }
  
  .stars {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin: 20px 0;
    font-size: 2rem;
  }
  
  .star {
    cursor: pointer;
    color: #ddd;
    transition: color 0.2s;
  }
  
  .star:hover,
  .star.active {
    color: #ffd700;
  }
  
  .software-item {
    cursor: pointer;
    position: relative;
  }
  
  
  .skills-container {
    margin-top: 10px;
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
  }
  
  .skill-pill {
    padding: 6px 12px;
    border-radius: 16px;
    font-size: 0.75rem;
    font-weight: 500;
    color: white;
    opacity: 0;
    transform: translateY(-10px);
    animation: slideIn 0.3s ease-out forwards;
    display: inline-block;
    margin-right: 4px;
    margin-bottom: 4px;
  }
  
  .skill-pill:nth-child(4n+1) { 
    background: linear-gradient(135deg, #667eea, #764ba2); 
    animation-delay: 0.1s; 
  }
  .skill-pill:nth-child(4n+2) { 
    background: linear-gradient(135deg, #f093fb, #f5576c); 
    animation-delay: 0.2s; 
  }
  .skill-pill:nth-child(4n+3) { 
    background: linear-gradient(135deg, #4facfe, #00f2fe); 
    animation-delay: 0.3s; 
  }
  .skill-pill:nth-child(4n) { 
    background: linear-gradient(135deg, #43e97b, #38f9d7); 
    animation-delay: 0.4s; 
  }
  
  @keyframes slideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .skill-option {
    padding: 16px 24px;
    border: 2.5px solid #1f2937;
    border-radius: 30px;
    cursor: pointer;
    transition: all 0.2s;
    background: white;
    text-align: center;
    font-size: 1.1rem;
    font-weight: 600;
    color: #1f2937;
    user-select: none;
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 50px;
  }
  
  .skill-option:hover {
    background: #f9fafb;
    transform: scale(1.02);
  }
  
  .skill-option.selected {
    border-color: #1f2937;
    background: #1f2937;
    color: white;
  }
</style>

<section class="py-20 px-4 bg-gradient-to-br from-blue-50 to-purple-50" id="form">
  <!-- Intake Section - Dynamic from Sanity -->
  <IntakeCards />

  <div class="max-w-4xl mx-auto text-center mb-12">
    <h2 class="text-4xl font-bold mb-4 text-gray-800">Join the Social Media Programme</h2>
    <p class="text-xl text-gray-600">Whether you're a graduate or business, let's find the perfect fit</p>
  </div>
  
  <div class="form-container" id="socialMediaFormContainer">
    <!-- Progress Indicator -->
    <div class="progress-indicator">
      <div class="progress-bar-container">
        <div class="progress-bar" id="smProgressBar"></div>
      </div>
      <div class="progress-text" id="smProgressText">Step 1 of 8</div>
    </div>
    
    <!-- Step 1: Applicant Type -->
    <div class="form-content" id="smStep1">
      <h3 class="text-2xl font-bold text-center mb-8 text-purple-600">Let's get started! 🚀</h3>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div class="option" data-value="business" onclick="selectSMOption(1, 'business'); showSMStep(2);">
          <div class="option-icon">💼</div>
          <div class="option-content">
            <div class="option-name">I'm a business owner</div>
          </div>
        </div>
        
        <div class="option" data-value="graduate" onclick="selectSMOption(1, 'graduate'); showSMStep(2);">
          <div class="option-icon">🎓</div>
          <div class="option-content">
            <div class="option-name">I want to apply to the program</div>
          </div>
        </div>
      </div>
    </div>
    
    <!-- Step 2a: Graduate Field of Study -->
    <div class="form-content hidden" id="smStep2Graduate">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">What did you study?</h3>
      <p class="text-center text-gray-600 mb-6">This helps us understand your background</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {graduateFields.map(field => (
          <div class="option" data-value={field.id} onclick={`selectSMOption(2, '${field.id}'); showSMStep(3);`}>
            <div class="option-icon">{field.icon}</div>
            <div class="option-content">
              <div class="option-name">{field.name}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Step 2b: Business Type -->
    <div class="form-content hidden" id="smStep2Business">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">What type of business do you have?</h3>
      <p class="text-center text-gray-600 mb-6">Understanding your industry helps us match you better</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {businessTypes.map(type => (
          <div class="option" data-value={type.id} onclick={`selectSMOption(2, '${type.id}'); showSMStep(4);`}>
            <div class="option-icon">{type.icon}</div>
            <div class="option-content">
              <div class="option-name">{type.name}</div>
            </div>
          </div>
        ))}
      </div>
    </div>
    
    <!-- Step 3: Graduate Experience -->
    <div class="form-content hidden" id="smStep3">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">What's your social media experience?</h3>
      <p class="text-center text-gray-600 mb-6">Don't worry - we'll train you from wherever you're at!</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {graduateExperience.map(exp => (
          <div class="option" data-value={exp.id} onclick={`selectSMOption(3, '${exp.id}'); showSMStep(3.5);`}>
            <div class="option-icon">{exp.icon}</div>
            <div class="option-content">
              <div class="option-name">{exp.name}</div>
            </div>
          </div>
        ))}
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" onclick="showSMStep(2)">Back</button>
        <div></div>
      </div>
    </div>
    
    <!-- Step 3.5: Software Familiarity -->
    <div class="form-content hidden" id="smStep3_5">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">What software are you familiar with?</h3>
      <p class="text-center text-gray-600 mb-6">Click on each to rate your skill level (1-5 stars)</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {softwareOptions.map(software => (
          <div class="option software-item" data-value={software.id} onclick={`openRatingPopup('${software.id}', '${software.name}');`}>
            <div class="option-icon">{software.icon}</div>
            <div class="option-content">
              <div class="option-name">{software.name}</div>
              <div class="skills-container hidden" id={`skills-${software.id}`}>
                <!-- Selected skills will be added here dynamically -->
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" onclick="showSMStep(3)">Back</button>
        <button class="btn-form btn-primary" onclick="showSMStep(7)">Continue</button>
      </div>
    </div>
    
    <!-- Step 4: Business Goals -->
    <div class="form-content hidden" id="smStep4">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">What are your main social media goals?</h3>
      <p class="text-center text-gray-600 mb-6">This helps us match you with the right graduate</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {businessGoals.map(goal => (
          <div class="option" data-value={goal.id} onclick={`selectSMOption(4, '${goal.id}'); showSMStep(5);`}>
            <div class="option-icon">{goal.icon}</div>
            <div class="option-content">
              <div class="option-name">{goal.name}</div>
            </div>
          </div>
        ))}
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" onclick="showSMStep(2)">Back</button>
        <div></div>
      </div>
    </div>
    
    <!-- Step 5: Current Social Media Handling -->
    <div class="form-content hidden" id="smStep5">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">How do you currently handle social media?</h3>
      <p class="text-center text-gray-600 mb-6">Understanding your current situation</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {currentSocialMedia.map(current => (
          <div class="option" data-value={current.id} onclick={`selectSMOption(5, '${current.id}'); showSMStep(6);`}>
            <div class="option-icon">{current.icon}</div>
            <div class="option-content">
              <div class="option-name">{current.name}</div>
            </div>
          </div>
        ))}
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" onclick="showSMStep(4)">Back</button>
        <div></div>
      </div>
    </div>
    
    <!-- Step 6: Platform Preferences -->
    <div class="form-content hidden" id="smStep6">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">Which platforms are most important for your business?</h3>
      <p class="text-center text-gray-600 mb-6">Select your top 2-3 priority platforms</p>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        {platforms.map(platform => (
          <div class="option" data-value={platform.id} onclick={`selectSMMultiple(6, '${platform.id}');`}>
            <div class="option-icon">{platform.icon}</div>
            <div class="option-content">
              <div class="option-name">{platform.name}</div>
            </div>
          </div>
        ))}
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" onclick="showSMStep(5)">Back</button>
        <button class="btn-form btn-primary" id="smNext6" onclick="showSMStep(7)" disabled>Continue</button>
      </div>
    </div>
    
    <!-- Step 7: Contact Information -->
    <div class="form-content hidden" id="smStep7">
      <h3 class="text-2xl font-bold text-center mb-2 text-purple-600">Let's get your details</h3>
      <p class="text-center text-gray-600 mb-6">We'll use this to contact you about the programme</p>
      
      <div class="form-section">
        <h4>Full Name *</h4>
        <input type="text" class="input-field" id="fullName" placeholder="Enter your full name" required>
      </div>
      
      <div class="form-section">
        <h4>Email Address *</h4>
        <input type="email" class="input-field" id="email" placeholder="your.email@example.com" required>
      </div>
      
      <div class="form-section">
        <h4>Phone Number *</h4>
        <input type="tel" class="input-field" id="phone" placeholder="+63 XXX XXX XXXX" required>
      </div>
      
      <div class="form-section">
        <h4>Tell us more about yourself or your business</h4>
        <textarea class="textarea-field" id="message" placeholder="Share any additional information that would help us match you with the perfect partner..."></textarea>
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" id="smBack7" onclick="goBackFromStep7()">Back</button>
        <button class="btn-form btn-primary" onclick="submitForm()" id="submitBtn">Submit Application</button>
      </div>
    </div>
    
    <!-- Step 8: Thank You -->
    <div class="form-content hidden" id="smStep8">
      <div class="success-content">
        <div class="success-icon">🎉</div>
        <h3 class="text-2xl font-bold mb-4 text-purple-600">Application Submitted Successfully!</h3>
        <p class="text-lg text-gray-600 mb-6">Thank you for your interest in our Social Media Programme. We'll review your application and get back to you within 24 hours.</p>
        
        <div class="mb-6">
          <p class="text-gray-700"><strong>What happens next?</strong></p>
          <ul class="text-left mt-3 text-gray-600">
            <li>• We'll review your application within 24 hours</li>
            <li>• If you're a good fit, we'll schedule a consultation call</li>
            <li>• For graduates: We'll discuss the training programme and match you with businesses</li>
            <li>• For businesses: We'll show you profiles of suitable graduate candidates</li>
            <li>• Programme starts with next intake in early 2025</li>
          </ul>
        </div>
        
        <a href="mailto:program@yoonet.com.ph" class="contact-link">
          📧 Contact Programme Team
        </a>
        
        <p class="text-sm text-gray-500 mt-4">
          Questions? Email program@yoonet.com.ph or call +63 47 XXX-XXXX
        </p>
      </div>
      
      <div class="form-buttons">
        <button class="btn-form btn-secondary" onclick="restartSMForm()">Start New Application</button>
        <div></div>
      </div>
    </div>
  </div>
  
  <!-- Rating Popup -->
  <div class="rating-popup hidden" id="ratingPopup" onclick="closeRatingPopup()">
    <div class="rating-modal" onclick="event.stopPropagation()">
      <div id="ratingStep">
        <h3 class="text-xl font-bold mb-4">How good are you?</h3>
        <p class="text-gray-600 mb-4" id="currentSoftware">Rate your skill level</p>
        
        <div class="stars">
          <span class="star" data-rating="1" onclick="setRating(1)">★</span>
          <span class="star" data-rating="2" onclick="setRating(2)">★</span>
          <span class="star" data-rating="3" onclick="setRating(3)">★</span>
          <span class="star" data-rating="4" onclick="setRating(4)">★</span>
          <span class="star" data-rating="5" onclick="setRating(5)">★</span>
        </div>
        
        <p class="text-sm text-gray-500 mt-6">Click a star to rate</p>
      </div>
      
      <div id="skillsStep" class="hidden">
        <h3 class="text-xl font-bold mb-2">Which areas are you skilled in?</h3>
        <p class="text-gray-600 mb-1" id="skillsSoftware">Select your areas of expertise</p>
        <p class="text-sm text-gray-500 mb-4">Click to select/deselect skills</p>
        
        <div class="grid grid-cols-2 gap-3 mb-6" id="skillsGrid">
          <!-- Skills will be populated here -->
        </div>
        
        <div class="flex gap-3 justify-center">
          <button class="btn-form btn-secondary" onclick="backToRating()">Back</button>
          <button class="btn-form btn-primary" onclick="saveRating()" id="saveSkillsBtn">Save Selection</button>
        </div>
      </div>
    </div>
  </div>
  
  <img src={svgPinkStar.src} alt="decoration" width="60" class="absolute -right-4 -bottom-4" />
</section>

<script>
  let smCurrentStep = 1;
  let smAnswers = {};
  let applicantType = '';
  let softwareRatings = {};
  let currentRatingSoftware = '';
  let currentRating = 0;
  let selectedSkills = [];
  let currentSoftwareSkills = [];
  
  function showSMStep(step) {
    // Hide all steps
    document.querySelectorAll('[id^="smStep"]').forEach(el => el.classList.add('hidden'));
    
    // Determine which step to show based on applicant type and step number
    let stepToShow = `smStep${step}`;
    let actualStep = step;
    
    if (step === 2) {
      stepToShow = applicantType === 'graduate' ? 'smStep2Graduate' : 'smStep2Business';
    } else if (step === 3.5) {
      stepToShow = 'smStep3_5';
      actualStep = 3.5;
    }
    
    // Show current step
    const stepEl = document.getElementById(stepToShow);
    if (stepEl) {
      stepEl.classList.remove('hidden');
    }
    
    // Update progress bar
    const progressBar = document.getElementById('smProgressBar');
    const progressText = document.getElementById('smProgressText');
    
    if (progressBar && progressText) {
      const progressPercentage = (Math.floor(actualStep) / 8) * 100;
      progressBar.style.width = `${progressPercentage}%`;
      progressText.textContent = `Step ${Math.ceil(actualStep)} of 8`;
    }
    
    smCurrentStep = step;
  }
  
  function selectSMOption(step, value) {
    // Store answer
    smAnswers[`step${step}`] = value;
    
    // Store applicant type for routing
    if (step === 1) {
      applicantType = value;
    }
    
    // Update selected state for visual feedback
    const stepSelectors = ['#smStep' + step, '#smStep' + step + 'Graduate', '#smStep' + step + 'Business'];
    
    stepSelectors.forEach(selector => {
      const stepEl = document.querySelector(selector);
      if (stepEl && !stepEl.classList.contains('hidden')) {
        const options = stepEl.querySelectorAll('.option');
        options.forEach(opt => opt.classList.remove('selected'));
        const selectedOption = stepEl.querySelector(`[data-value="${value}"]`);
        if (selectedOption) {
          selectedOption.classList.add('selected');
        }
      }
    });
  }
  
  function selectSMMultiple(step, value) {
    // Initialize array if it doesn't exist
    if (!smAnswers[`step${step}`]) {
      smAnswers[`step${step}`] = [];
    }
    
    const stepEl = document.getElementById(`smStep${step}`);
    const option = stepEl.querySelector(`[data-value="${value}"]`);
    
    // Toggle selection
    if (smAnswers[`step${step}`].includes(value)) {
      // Remove from selection
      smAnswers[`step${step}`] = smAnswers[`step${step}`].filter(v => v !== value);
      option.classList.remove('selected');
    } else {
      // Add to selection (max 3)
      if (smAnswers[`step${step}`].length < 3) {
        smAnswers[`step${step}`].push(value);
        option.classList.add('selected');
      }
    }
    
    // Enable/disable continue button
    const nextBtn = document.getElementById('smNext6');
    if (nextBtn) {
      nextBtn.disabled = smAnswers[`step${step}`].length === 0;
    }
  }
  
  function goBackFromStep7() {
    if (applicantType === 'graduate') {
      showSMStep(3.5);
    } else {
      showSMStep(6);
    }
  }
  
  function openRatingPopup(softwareId, softwareName) {
    currentRatingSoftware = softwareId;
    currentRating = softwareRatings[softwareId] || 0;
    selectedSkills = [];
    
    // Find the software skills
    const softwareData = [
      { id: 'canva', name: 'Canva', skills: ['Templates', 'Brand Kits', 'Social Graphics', 'Presentations'] },
      { id: 'photoshop', name: 'Photoshop', skills: ['Photo Retouching', 'Digital Art', 'Compositing', 'Color Correction'] },
      { id: 'figma', name: 'Figma', skills: ['UX Design', 'Prototyping', 'Animations', 'Component Systems'] },
      { id: 'premiere', name: 'Premiere Pro', skills: ['Video Editing', 'Color Grading', 'Audio Sync', 'Transitions'] },
      { id: 'aftereffects', name: 'After Effects', skills: ['Motion Graphics', 'Visual Effects', '2D Animation', 'Compositing'] },
      { id: 'hootsuite', name: 'Hootsuite', skills: ['Scheduling', 'Analytics', 'Team Management', 'Content Curation'] },
      { id: 'buffer', name: 'Buffer', skills: ['Content Scheduling', 'Analytics', 'Team Collaboration', 'Auto-posting'] },
      { id: 'mailchimp', name: 'Mailchimp', skills: ['Automations', 'Segmentation', 'A/B Testing', 'Campaign Analytics'] }
    ];
    
    const software = softwareData.find(s => s.id === softwareId);
    currentSoftwareSkills = software ? software.skills : [];
    
    document.getElementById('currentSoftware').textContent = `Rate your skill level with ${softwareName}`;
    document.getElementById('skillsSoftware').textContent = `Select your ${softwareName} expertise areas`;
    document.getElementById('ratingPopup').classList.remove('hidden');
    
    // Show rating step, hide skills step
    document.getElementById('ratingStep').classList.remove('hidden');
    document.getElementById('skillsStep').classList.add('hidden');
    
    // Update star display
    updateStarDisplay(currentRating);
  }
  
  function closeRatingPopup() {
    document.getElementById('ratingPopup').classList.add('hidden');
    currentRatingSoftware = '';
    currentRating = 0;
    selectedSkills = [];
    currentSoftwareSkills = [];
  }
  
  function showSkillsStep() {
    // Hide rating step, show skills step
    document.getElementById('ratingStep').classList.add('hidden');
    document.getElementById('skillsStep').classList.remove('hidden');
    
    // Populate skills grid
    const skillsGrid = document.getElementById('skillsGrid');
    skillsGrid.innerHTML = '';
    
    currentSoftwareSkills.forEach(skill => {
      const skillOption = document.createElement('div');
      skillOption.className = 'skill-option';
      skillOption.textContent = skill;
      skillOption.onclick = () => toggleSkill(skill, skillOption);
      skillsGrid.appendChild(skillOption);
    });
  }
  
  function backToRating() {
    document.getElementById('skillsStep').classList.add('hidden');
    document.getElementById('ratingStep').classList.remove('hidden');
  }
  
  function toggleSkill(skill, element) {
    const index = selectedSkills.indexOf(skill);
    if (index > -1) {
      // Remove skill
      selectedSkills.splice(index, 1);
      element.classList.remove('selected');
    } else {
      // Add skill
      selectedSkills.push(skill);
      element.classList.add('selected');
    }
  }
  
  function setRating(rating) {
    currentRating = rating;
    updateStarDisplay(rating);
    // Automatically advance to skills selection after a brief delay
    setTimeout(() => {
      showSkillsStep();
    }, 300);
  }
  
  function updateStarDisplay(rating) {
    const stars = document.querySelectorAll('.star');
    stars.forEach((star, index) => {
      if (index < rating) {
        star.classList.add('active');
      } else {
        star.classList.remove('active');
      }
    });
  }
  
  function saveRating() {
    if (currentRatingSoftware && currentRating > 0) {
      softwareRatings[currentRatingSoftware] = {
        rating: currentRating,
        skills: [...selectedSkills]
      };
      
      // Show only the selected skills as pills with matching gradients
      const skillsContainer = document.getElementById(`skills-${currentRatingSoftware}`);
      if (skillsContainer && selectedSkills.length > 0) {
        // Clear existing pills
        skillsContainer.innerHTML = '';
        
        // Add only selected skills as pills with the same gradient colors
        selectedSkills.forEach((skill, index) => {
          const pill = document.createElement('span');
          pill.className = 'skill-pill';
          pill.textContent = skill;
          
          // Apply gradient based on index to match selection colors
          const gradients = [
            'linear-gradient(135deg, #667eea, #764ba2)',
            'linear-gradient(135deg, #f093fb, #f5576c)',
            'linear-gradient(135deg, #4facfe, #00f2fe)',
            'linear-gradient(135deg, #43e97b, #38f9d7)'
          ];
          pill.style.background = gradients[index % 4];
          pill.style.animationDelay = `${(index + 1) * 0.1}s`;
          
          skillsContainer.appendChild(pill);
        });
        
        skillsContainer.classList.remove('hidden');
      }
      
      // Mark the software item as selected (but no visible rating)
      const softwareItem = document.querySelector(`[data-value="${currentRatingSoftware}"]`);
      if (softwareItem) {
        softwareItem.classList.add('selected');
      }
      
      closeRatingPopup();
    }
  }
  
  async function submitForm() {
    const submitBtn = document.getElementById('submitBtn');
    const originalText = submitBtn.textContent;
    
    // Validate required fields
    const fullName = document.getElementById('fullName').value.trim();
    const email = document.getElementById('email').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const message = document.getElementById('message').value.trim();
    
    if (!fullName || !email || !phone) {
      alert('Please fill in all required fields (Name, Email, Phone)');
      return;
    }
    
    // Show loading state
    submitBtn.disabled = true;
    submitBtn.textContent = 'Submitting...';
    
    try {
      // Prepare submission data
      const submissionData = {
        applicantType: applicantType,
        fullName: fullName,
        email: email,
        phone: phone,
        additionalMessage: message
      };
      
      // Add type-specific data
      if (applicantType === 'business') {
        submissionData.businessType = smAnswers.step2;
        submissionData.socialMediaGoals = smAnswers.step4;
        submissionData.currentSocialMediaHandling = smAnswers.step5;
        submissionData.platformPreferences = smAnswers.step6 || [];
      } else if (applicantType === 'graduate') {
        submissionData.fieldOfStudy = smAnswers.step2;
        submissionData.socialMediaExperience = smAnswers.step3;
        
        // Convert software ratings to the expected format
        const softwareSkillsArray = [];
        Object.keys(softwareRatings).forEach(softwareId => {
          const ratingData = softwareRatings[softwareId];
          if (ratingData.rating > 0) {
            softwareSkillsArray.push({
              software: softwareId,
              rating: ratingData.rating,
              skills: ratingData.skills || []
            });
          }
        });
        submissionData.softwareSkills = softwareSkillsArray;
      }
      
      // Debug: Log submission data
      console.log('Submitting data:', submissionData);
      console.log('Applicant type:', applicantType);
      console.log('Answers:', smAnswers);
      console.log('Software ratings:', softwareRatings);
      
      // Submit to API
      const response = await fetch('/api/submit-form', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(submissionData)
      });
      
      console.log('Response status:', response.status);
      
      const result = await response.json();
      console.log('Response result:', result);
      
      if (response.ok && result.success) {
        // Success - go to thank you page
        console.log('✅ Submission successful!');
        showSMStep(8);
      } else {
        // Error
        console.error('❌ Submission failed:', result);
        alert(result.error || 'Failed to submit application. Please try again.');
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
      
    } catch (error) {
      console.error('Submission error:', error);
      alert('Failed to submit application. Please check your connection and try again.');
      submitBtn.disabled = false;
      submitBtn.textContent = originalText;
    }
  }

  function restartSMForm() {
    smCurrentStep = 1;
    smAnswers = {};
    applicantType = '';
    softwareRatings = {};
    document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
    document.querySelectorAll('.input-field, .textarea-field').forEach(field => field.value = '');
    document.querySelectorAll('.skills-container').forEach(skills => {
      skills.innerHTML = '';
      skills.classList.add('hidden');
    });
    document.getElementById('smNext6').disabled = true;
    document.getElementById('submitBtn').disabled = false;
    document.getElementById('submitBtn').textContent = 'Submit Application';
    closeRatingPopup();
    showSMStep(1);
  }
  
  // Global functions for onclick handlers
  window.showSMStep = showSMStep;
  window.selectSMOption = selectSMOption;
  window.selectSMMultiple = selectSMMultiple;
  window.goBackFromStep7 = goBackFromStep7;
  window.restartSMForm = restartSMForm;
  window.openRatingPopup = openRatingPopup;
  window.closeRatingPopup = closeRatingPopup;
  window.setRating = setRating;
  window.saveRating = saveRating;
  window.showSkillsStep = showSkillsStep;
  window.backToRating = backToRating;
  window.toggleSkill = toggleSkill;
  window.submitForm = submitForm;
  
  // Form validation for step 7
  document.addEventListener('DOMContentLoaded', function() {
    const requiredFields = ['fullName', 'email', 'phone'];
    
    requiredFields.forEach(fieldId => {
      const field = document.getElementById(fieldId);
      if (field) {
        field.addEventListener('input', validateContactForm);
      }
    });
    
    function validateContactForm() {
      const allFilled = requiredFields.every(fieldId => {
        const field = document.getElementById(fieldId);
        return field && field.value.trim() !== '';
      });
      
      // Enable/disable submit button based on validation
      // This could be enhanced with more validation logic
    }
  });
</script>